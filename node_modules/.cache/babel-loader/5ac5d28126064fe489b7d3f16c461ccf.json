{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleSpeciesPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Members from \"../components/Members/Members\";\nimport Nav from \"../components/Navbar/Nav\";\nimport { Button, Modal, Input, Form, TextArea, Image, Dropdown } from \"semantic-ui-react\";\nimport { SingleSpeciesContainer, SingleSpeciesWrapper, SingleSpeciesContent, SingleSpeciesName, SingleSpeciesImage, SingleSpeciesDescription, SingleSpeciesPageWrapper, DeleteButton } from \"./SingleSpeciesPageStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteSpecies, updateSpecies } from \"../feature/SpeciesSlice\";\nimport { addBird } from \"../feature/BirdsSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SingleSpeciesPage({\n  match\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const history = useHistory(); // Pulling state from store\n\n  const species = useSelector(state => state.species);\n  const birds = useSelector(state => state.birds); // Retrieving name from URL params\n\n  const currentspecies = match.params.name;\n  let i;\n  let currentspecies_desc, currentspecies_id, currentspecies_img, currentspecies_name; // Matching the name on URL with name in the store\n\n  for (i = 0; i < species.length; i++) {\n    if (species[i].name === currentspecies) {\n      currentspecies_id = species[i].id;\n      currentspecies_desc = species[i].description;\n      currentspecies_img = species[i].img;\n      currentspecies_name = species[i].name;\n    }\n  }\n\n  const [open, setOpen] = useState(false); // Delete species\n\n  const handleDeleteClick = () => {\n    dispatch(deleteSpecies({\n      name: currentspecies_name\n    }));\n    history.push(\"/birdex-redux\");\n  }; // Updating species\n\n\n  const [Description, setNewDescription] = useState(\"\");\n  const [Img, setNewImg] = useState(\"\");\n  const updatedSpecies = {\n    id: currentspecies_id,\n    name: currentspecies_name,\n    description: Description,\n    img: Img\n  };\n\n  const HandleUpdate = () => {\n    if (Description === \"\") {\n      setNewDescription(currentspecies_desc);\n    } else if (Img === \"\") {\n      setNewImg(currentspecies_img);\n    } else {\n      dispatch(updateSpecies(updatedSpecies));\n      history.go(0);\n    }\n  }; // //If description is null or img is null, set it to the previous value\n  // const HandleUpdate = async() => {\n  //   if (Description === \"\" ){\n  //     setNewDescription(family.speciesdesc)\n  //   } else if (Img === \"\") {\n  //     setNewImg(family.speciesimg)\n  //   } else {\n  //     onSubmitUpdate()\n  //     history.push(`/species/${family.speciesname}`)\n  //   }\n  // }\n  // //FOR ADDING NEW BIRD TO THE CURRENT SPECIES\n  // const ts = new Date();\n  // const currentDate = ts.toLocaleDateString(\"en-US\") + ' ' + ts.toLocaleTimeString(\"en-US\")\n\n\n  const [weightInput, setWeight] = useState(0);\n  const [openBird, setOpenBird] = useState(false);\n  const [BirdNameInput, setBirdName] = useState(\"\");\n  const [BirdImageInput, setBirdImage] = useState(\"\");\n  const [BirdSexInput, setSex] = useState(\"\"); //For the input field for weight\n\n  const options = [{\n    key: \"integer\",\n    text: \"integer\",\n    value: \"integer\"\n  }, {\n    key: \"decimals\",\n    text: \"decimals\",\n    value: \"decimals\"\n  }];\n  let j, k;\n  let birdList = [];\n\n  for (k = 0; k < birds.length; k++) {\n    if (birds[k].species === currentspecies_name) {\n      birdList.push(birds[k].name);\n    }\n  }\n\n  const CheckValid = () => {\n    for (j = 0; j < birdList.length; j++) {\n      if (birdList[j] === BirdNameInput || BirdNameInput === \"\" || BirdImageInput === \"\" || weightInput === 0 || BirdSexInput.toUpperCase() !== (\"M\" || \"F\")) {\n        setBirdName(\"\");\n        setBirdImage(\"\");\n        setSex(\"\");\n        setWeight(0);\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n\n  const HandleBird = () => {\n    dispatch(addBird({\n      id: Math.random(),\n      speciesId: currentspecies_id,\n      name: BirdNameInput,\n      sex: BirdSexInput.toUpperCase(),\n      species: currentspecies_name,\n      img: BirdImageInput,\n      weight: weightInput\n    }));\n    setOpenBird(!openBird);\n    history.go(0);\n  };\n\n  const HandleAddBird = () => {\n    CheckValid() ? HandleBird() : alert(\"ERROR: Either bird name already exists, there are blank input fields or weight input is invalid.\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(SingleSpeciesPageWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteButton, {\n      onClick: handleDeleteClick,\n      children: \"Delete Species\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SingleSpeciesContainer, {\n      children: [/*#__PURE__*/_jsxDEV(SingleSpeciesWrapper, {\n        children: [/*#__PURE__*/_jsxDEV(SingleSpeciesImage, {\n          src: currentspecies_img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SingleSpeciesContent, {\n          children: [/*#__PURE__*/_jsxDEV(SingleSpeciesName, {\n            children: currentspecies_name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(SingleSpeciesDescription, {\n            children: currentspecies_desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"AddBirdButton\",\n        onClick: () => setOpenBird(!openBird),\n        children: \"Add New Bird\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this), currentspecies_id !== null && currentspecies_name !== null && currentspecies_img !== null ? /*#__PURE__*/_jsxDEV(Members, {\n        id: currentspecies_id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this) : null]\n    }, currentspecies_id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      size: \"large\",\n      onClose: () => setOpen(false),\n      onOpen: () => setOpen(true),\n      open: open,\n      trigger: /*#__PURE__*/_jsxDEV(Button, {\n        className: \"update--showmodal--button\",\n        style: {\n          position: \"absolute\",\n          right: 0,\n          margin: \"130px 100px 130px 130px\",\n          cursor: \"pointer\",\n          zIndex: 999\n        },\n        children: \"Update Species\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Update Species\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        image: true,\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          size: \"large\",\n          src: Img,\n          wrapped: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Description, {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"100%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(TextArea, {\n              placeholder: \"Enter description\",\n              defaultValue: currentspecies_desc || Description,\n              onChange: e => setNewDescription(e.target.value),\n              style: {\n                marginBottom: \"30px\",\n                height: \"150px\",\n                width: \"100%\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Enter Image Address\",\n            defaultValue: currentspecies_img || Img,\n            onChange: e => setNewImg(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Update\",\n          labelPosition: \"right\",\n          icon: \"checkmark\",\n          onClick: HandleUpdate,\n          positive: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      onClose: () => setOpenBird(false),\n      onOpen: () => setOpenBird(true),\n      open: openBird,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Add New Bird\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        image: true,\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          size: \"large\",\n          src: BirdImageInput,\n          wrapped: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Description, {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            padding: \"10px\",\n            width: \"100%\",\n            maxWidth: \"350px\",\n            marginLeft: \"20px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Name\",\n            type: \"text\",\n            value: BirdNameInput,\n            onChange: e => setBirdName(e.target.value),\n            style: {\n              marginBottom: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Sex\",\n            type: \"text\",\n            value: BirdSexInput,\n            onChange: e => setSex(e.target.value),\n            style: {\n              marginBottom: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Image Address\",\n            type: \"text\",\n            value: BirdImageInput,\n            onChange: e => setBirdImage(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            type: \"number\",\n            label: /*#__PURE__*/_jsxDEV(Dropdown, {\n              defaultValue: \"int\",\n              options: options\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 22\n            }, this),\n            labelPosition: \"right\",\n            placeholder: \"Enter weight\",\n            value: weightInput,\n            onChange: e => setWeight(e.target.value),\n            style: {\n              marginTop: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          content: \"Add\",\n          labelPosition: \"right\",\n          icon: \"checkmark\",\n          onClick: HandleAddBird,\n          positive: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SingleSpeciesPage, \"n3qPJYxB7hs/dGMt5lF1qLWKolY=\", false, function () {\n  return [useDispatch, useHistory, useSelector, useSelector];\n});\n\n_c = SingleSpeciesPage;\nexport default SingleSpeciesPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"SingleSpeciesPage\");","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleSpeciesPage.js"],"names":["React","useState","useHistory","Members","Nav","Button","Modal","Input","Form","TextArea","Image","Dropdown","SingleSpeciesContainer","SingleSpeciesWrapper","SingleSpeciesContent","SingleSpeciesName","SingleSpeciesImage","SingleSpeciesDescription","SingleSpeciesPageWrapper","DeleteButton","useDispatch","useSelector","deleteSpecies","updateSpecies","addBird","SingleSpeciesPage","match","dispatch","history","species","state","birds","currentspecies","params","name","i","currentspecies_desc","currentspecies_id","currentspecies_img","currentspecies_name","length","id","description","img","open","setOpen","handleDeleteClick","push","Description","setNewDescription","Img","setNewImg","updatedSpecies","HandleUpdate","go","weightInput","setWeight","openBird","setOpenBird","BirdNameInput","setBirdName","BirdImageInput","setBirdImage","BirdSexInput","setSex","options","key","text","value","j","k","birdList","CheckValid","toUpperCase","HandleBird","Math","random","speciesId","sex","weight","HandleAddBird","alert","position","right","margin","cursor","zIndex","display","flexDirection","width","e","target","marginBottom","height","padding","maxWidth","marginLeft","marginTop"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Members from \"../components/Members/Members\";\nimport Nav from \"../components/Navbar/Nav\";\nimport {\n  Button,\n  Modal,\n  Input,\n  Form,\n  TextArea,\n  Image,\n  Dropdown,\n} from \"semantic-ui-react\";\n\nimport {\n  SingleSpeciesContainer,\n  SingleSpeciesWrapper,\n  SingleSpeciesContent,\n  SingleSpeciesName,\n  SingleSpeciesImage,\n  SingleSpeciesDescription,\n  SingleSpeciesPageWrapper,\n  DeleteButton,\n} from \"./SingleSpeciesPageStyle\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deleteSpecies, updateSpecies } from \"../feature/SpeciesSlice\";\nimport { addBird } from \"../feature/BirdsSlice\";\n\nfunction SingleSpeciesPage({ match }) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  // Pulling state from store\n  const species = useSelector((state) => state.species);\n  const birds = useSelector((state) => state.birds);\n\n  // Retrieving name from URL params\n  const currentspecies = match.params.name;\n\n  let i;\n  let currentspecies_desc,\n    currentspecies_id,\n    currentspecies_img,\n    currentspecies_name;\n\n  // Matching the name on URL with name in the store\n  for (i = 0; i < species.length; i++) {\n    if (species[i].name === currentspecies) {\n      currentspecies_id = species[i].id;\n      currentspecies_desc = species[i].description;\n      currentspecies_img = species[i].img;\n      currentspecies_name = species[i].name;\n    }\n  }\n\n  const [open, setOpen] = useState(false);\n\n  // Delete species\n  const handleDeleteClick = () => {\n    dispatch(deleteSpecies({ name: currentspecies_name }));\n    history.push(\"/birdex-redux\");\n  };\n\n  // Updating species\n  const [Description, setNewDescription] = useState(\"\");\n  const [Img, setNewImg] = useState(\"\");\n\n  const updatedSpecies = {\n    id: currentspecies_id,\n    name: currentspecies_name,\n    description: Description,\n    img: Img,\n  };\n  const HandleUpdate = () => {\n    if (Description === \"\") {\n      setNewDescription(currentspecies_desc);\n    } else if (Img === \"\") {\n      setNewImg(currentspecies_img);\n    } else {\n      dispatch(updateSpecies(updatedSpecies));\n      history.go(0);\n    }\n  };\n\n  // //If description is null or img is null, set it to the previous value\n  // const HandleUpdate = async() => {\n  //   if (Description === \"\" ){\n  //     setNewDescription(family.speciesdesc)\n  //   } else if (Img === \"\") {\n  //     setNewImg(family.speciesimg)\n  //   } else {\n  //     onSubmitUpdate()\n  //     history.push(`/species/${family.speciesname}`)\n  //   }\n  // }\n\n  // //FOR ADDING NEW BIRD TO THE CURRENT SPECIES\n  // const ts = new Date();\n  // const currentDate = ts.toLocaleDateString(\"en-US\") + ' ' + ts.toLocaleTimeString(\"en-US\")\n\n  const [weightInput, setWeight] = useState(0);\n  const [openBird, setOpenBird] = useState(false);\n  const [BirdNameInput, setBirdName] = useState(\"\");\n  const [BirdImageInput, setBirdImage] = useState(\"\");\n  const [BirdSexInput, setSex] = useState(\"\");\n\n  //For the input field for weight\n  const options = [\n    { key: \"integer\", text: \"integer\", value: \"integer\" },\n    { key: \"decimals\", text: \"decimals\", value: \"decimals\" },\n  ];\n\n  let j, k;\n  let birdList = [];\n  for (k = 0; k < birds.length; k++) {\n    if (birds[k].species === currentspecies_name) {\n      birdList.push(birds[k].name);\n    }\n  }\n\n  const CheckValid = () => {\n    for (j = 0; j < birdList.length; j++) {\n      if (\n        birdList[j] === BirdNameInput ||\n        BirdNameInput === \"\" ||\n        BirdImageInput === \"\" ||\n        weightInput === 0 ||\n        BirdSexInput.toUpperCase() !== (\"M\" || \"F\")\n      ) {\n        setBirdName(\"\");\n        setBirdImage(\"\");\n        setSex(\"\");\n        setWeight(0);\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n\n  const HandleBird = () => {\n    dispatch(\n      addBird({\n        id: Math.random(),\n        speciesId: currentspecies_id,\n        name: BirdNameInput,\n        sex: BirdSexInput.toUpperCase(),\n        species: currentspecies_name,\n        img: BirdImageInput,\n        weight: weightInput,\n      })\n    );\n    setOpenBird(!openBird);\n    history.go(0);\n  };\n\n  const HandleAddBird = () => {\n    CheckValid()\n      ? HandleBird()\n      : alert(\n          \"ERROR: Either bird name already exists, there are blank input fields or weight input is invalid.\"\n        );\n  };\n\n  return (\n    <SingleSpeciesPageWrapper>\n      <Nav />\n      <DeleteButton onClick={handleDeleteClick}>Delete Species</DeleteButton>\n      <SingleSpeciesContainer key={currentspecies_id}>\n        <SingleSpeciesWrapper>\n          <SingleSpeciesImage src={currentspecies_img} />\n          <SingleSpeciesContent>\n            <SingleSpeciesName>{currentspecies_name}</SingleSpeciesName>\n            <SingleSpeciesDescription>\n              {currentspecies_desc}\n            </SingleSpeciesDescription>\n          </SingleSpeciesContent>\n        </SingleSpeciesWrapper>\n        <button\n          className=\"AddBirdButton\"\n          onClick={() => setOpenBird(!openBird)}\n        >\n          Add New Bird\n        </button>\n\n        {currentspecies_id !== null &&\n        currentspecies_name !== null &&\n        currentspecies_img !== null ? (\n          <Members id={currentspecies_id} />\n        ) : null}\n      </SingleSpeciesContainer>\n\n      {/* MODAL TO UPDATE SPECIES*/}\n      <Modal\n        size={\"large\"}\n        onClose={() => setOpen(false)}\n        onOpen={() => setOpen(true)}\n        open={open}\n        trigger={\n          <Button\n            className=\"update--showmodal--button\"\n            style={{\n              position: \"absolute\",\n              right: 0,\n              margin: \"130px 100px 130px 130px\",\n              cursor: \"pointer\",\n              zIndex: 999,\n            }}\n          >\n            Update Species\n          </Button>\n        }\n      >\n        <Modal.Header>Update Species</Modal.Header>\n        <Modal.Content image>\n          <Image size=\"large\" src={Img} wrapped />\n          <Modal.Description\n            style={{ display: \"flex\", flexDirection: \"column\", width: \"100%\" }}\n          >\n            <Form>\n              <TextArea\n                placeholder=\"Enter description\"\n                defaultValue={currentspecies_desc || Description}\n                onChange={(e) => setNewDescription(e.target.value)}\n                style={{ marginBottom: \"30px\", height: \"150px\", width: \"100%\" }}\n              />\n            </Form>\n            <Input\n              placeholder=\"Enter Image Address\"\n              defaultValue={currentspecies_img || Img}\n              onChange={(e) => setNewImg(e.target.value)}\n            />\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            content=\"Update\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={HandleUpdate}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n\n      {/* Modal TO ADD NEW BIRD*/}\n      <Modal\n        onClose={() => setOpenBird(false)}\n        onOpen={() => setOpenBird(true)}\n        open={openBird}\n      >\n        <Modal.Header>Add New Bird</Modal.Header>\n        <Modal.Content image>\n          <Image size=\"large\" src={BirdImageInput} wrapped />\n          <Modal.Description\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              padding: \"10px\",\n              width: \"100%\",\n              maxWidth: \"350px\",\n              marginLeft: \"20px\",\n            }}\n          >\n            <Input\n              placeholder=\"Name\"\n              type=\"text\"\n              value={BirdNameInput}\n              onChange={(e) => setBirdName(e.target.value)}\n              style={{ marginBottom: \"20px\" }}\n            />\n\n            <Input\n              placeholder=\"Sex\"\n              type=\"text\"\n              value={BirdSexInput}\n              onChange={(e) => setSex(e.target.value)}\n              style={{ marginBottom: \"20px\" }}\n            />\n\n            <Input\n              placeholder=\"Image Address\"\n              type=\"text\"\n              value={BirdImageInput}\n              onChange={(e) => setBirdImage(e.target.value)}\n            />\n\n            <Input\n              type=\"number\"\n              label={<Dropdown defaultValue=\"int\" options={options} />}\n              labelPosition=\"right\"\n              placeholder=\"Enter weight\"\n              value={weightInput}\n              onChange={(e) => setWeight(e.target.value)}\n              style={{ marginTop: \"20px\" }}\n            />\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            content=\"Add\"\n            labelPosition=\"right\"\n            icon=\"checkmark\"\n            onClick={HandleAddBird}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n    </SingleSpeciesPageWrapper>\n  );\n}\n\nexport default SingleSpeciesPage;\n"]},"metadata":{},"sourceType":"module"}