[{"/Users/dtzr/Documents/GitHub/birdex-redux/src/index.js":"1","/Users/dtzr/Documents/GitHub/birdex-redux/src/serviceWorker.js":"2","/Users/dtzr/Documents/GitHub/birdex-redux/src/App.js":"3","/Users/dtzr/Documents/GitHub/birdex-redux/src/app/store.js":"4","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleSpeciesPage.js":"5","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/EntriesPage.js":"6","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/HomePage.js":"7","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleBird.js":"8","/Users/dtzr/Documents/GitHub/birdex-redux/src/feature/SpeciesSlice.js":"9","/Users/dtzr/Documents/GitHub/birdex-redux/src/feature/BirdsSlice.js":"10","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleSpeciesPageStyle.js":"11","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/HomePageStyle.js":"12","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleBirdStyle.js":"13","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Members/Members.js":"14","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Charts/LineChart.js":"15","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/Hero.js":"16","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Charts/BarChart.js":"17","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Navbar/Nav.js":"18","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/HeroStyles.js":"19","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Navbar/NavStyles.js":"20","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SearchBar/SearchBar.js":"21","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SpeciesSearch/SpeciesSearch.js":"22","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SpeciesContainer/SpeciesContainer.js":"23","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SearchBar/SearchBarStyles.js":"24"},{"size":627,"mtime":1623170970011,"results":"25","hashOfConfig":"26"},{"size":5014,"mtime":1623170970012,"results":"27","hashOfConfig":"26"},{"size":1234,"mtime":1656343836949,"results":"28","hashOfConfig":"26"},{"size":267,"mtime":1623170970010,"results":"29","hashOfConfig":"26"},{"size":8911,"mtime":1656344399622,"results":"30","hashOfConfig":"26"},{"size":6906,"mtime":1641127142288,"results":"31","hashOfConfig":"26"},{"size":295,"mtime":1641128283377,"results":"32","hashOfConfig":"26"},{"size":4857,"mtime":1641224654652,"results":"33","hashOfConfig":"26"},{"size":4297,"mtime":1656343493969,"results":"34","hashOfConfig":"26"},{"size":2440,"mtime":1656343094764,"results":"35","hashOfConfig":"26"},{"size":1647,"mtime":1623338697837,"results":"36","hashOfConfig":"26"},{"size":532,"mtime":1656343761277,"results":"37","hashOfConfig":"26"},{"size":3556,"mtime":1641224530847,"results":"38","hashOfConfig":"26"},{"size":1073,"mtime":1641223824367,"results":"39","hashOfConfig":"26"},{"size":759,"mtime":1623170970010,"results":"40","hashOfConfig":"26"},{"size":1214,"mtime":1641219459704,"results":"41","hashOfConfig":"26"},{"size":1254,"mtime":1623170970010,"results":"42","hashOfConfig":"26"},{"size":3202,"mtime":1656344184877,"results":"43","hashOfConfig":"26"},{"size":306,"mtime":1625498511458,"results":"44","hashOfConfig":"26"},{"size":835,"mtime":1623170970011,"results":"45","hashOfConfig":"26"},{"size":626,"mtime":1623170970010,"results":"46","hashOfConfig":"26"},{"size":814,"mtime":1623170970010,"results":"47","hashOfConfig":"26"},{"size":981,"mtime":1641181782050,"results":"48","hashOfConfig":"26"},{"size":709,"mtime":1625496877341,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"15m4du8",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"/Users/dtzr/Documents/GitHub/birdex-redux/src/index.js",[],["106","107"],"/Users/dtzr/Documents/GitHub/birdex-redux/src/serviceWorker.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/App.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/app/store.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleSpeciesPage.js",["108","109","110","111","112","113","114","115","116","117"],"/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/EntriesPage.js",["118","119","120"],"import React, { useEffect, useState } from 'react'\nimport Nav from '../components/Navbar/Nav'\nimport { Icon, Menu, Table, Button, Modal, Input, Dropdown  } from 'semantic-ui-react'\nimport './EntriesPageStyles.css'\nimport { useHistory } from 'react-router'\n\n\nfunction EntriesPage({match}) {\n\n  const data = match.params\n  const ts = new Date();\n  const history = useHistory()\n\n  //State of modal that adds new entry\n  const [open, setOpen] = useState(false) \n  const [weightinput, setWeight] = useState(0);\n  const currentDate = ts.toLocaleDateString(\"en-US\") + ' ' + ts.toLocaleTimeString(\"en-US\")\n  \n  //State of modal that updates entry\n  const [open2, setOpen2] = useState(false)\n  const [newWeight, setnewWeight] = useState('')\n  const [editId, seteditId] = useState(\"\")\n\n  //Server to add new entries\n  const newEntries = async e => {\n    if (weightinput <= 0){\n      alert(\"Incorrect Weight Value!\")\n      setWeight(0)\n    } else {\n        //create entry\n      }\n    }\n\n    const sendEntry = () => {\n      setOpen(false)\n      newEntries()\n    }\n\n  //Server to render entries\n  const [entry, setEntry] = useState([])\n\n  const getbirdEntries = async() => {\n    try {\n      const response = await fetch(`/birds/${data.birdName}/${data.birdsid}/${data.species_name}/entries`)\n      const jsonData = await response.json()\n\n      setEntry(jsonData)\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  useEffect(() => {\n      getbirdEntries()\n  },[])\n\n  console.log(entry)\n\n  //Server to delete entry\n  //Only allow to delete if there is more than one entry --> so there must be at least an entry in every bird\n  const deletebird = async(id) => {\n    try {\n      const deletebird = await fetch(`/birds/${data.birdName}/${data.birdsid}/${data.species_name}/entries`,{\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          \"entry_id\": id\n        })\n      })\n      window.location.reload();\n    } catch (err) {\n      console.log(err.message)\n    }\n  }\n\n  const handleDelete = (id) => {\n    if(entry.length > 1){\n      deletebird(id)\n    }else{\n      alert(\"You need to keep at least one entry!\")\n    }\n  }\n\n  //Server to update entry\n  const handleUpdate = (id) => {\n    setOpen2(!open2)\n    seteditId(id) /* In order to make the current id that we clicked a global variable */\n  }\n\n  const onUpdate = async() => {\n    try {\n      const response = await fetch(`/birds/${data.birdName}/${data.birdsid}/${data.species_name}/entries`,\n        {\n          method: \"PUT\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            \"id\": editId,\n            \"weight\": newWeight,\n            \"created_at\": currentDate,\n          })\n        }\n      )\n    } catch (err) {\n      console.error(err.message);\n    }\n  };\n  \n  const setUpdate = () => {\n    onUpdate();\n    history.push('/')\n  }\n\n  console.log(entry)\n  //DISPLAYING ALL ENTRIES JSX\n  const entries = entry.map(details => {\n    return (\n    <Table.Body key={details.entry_id} style={{textAlign: \"center\" }}>\n        <Table.Row className =\"EntriesTableRow\">\n        <Table.Cell >{(details.created_at)}</Table.Cell>\n        <Table.Cell>{details.weight}</Table.Cell> \n        <Table.Cell><Icon className=\"edit-button\" name='edit' size='big' onClick={()=>handleUpdate(details.entry_id)}/></Table.Cell> \n        <Table.Cell><Icon className=\"delete-button\" name='delete' size='big' color=\"red\" onClick = {()=> handleDelete(details.entry_id)}/></Table.Cell> \n        </Table.Row>\n    </Table.Body>\n  )})\n\n  //For the input field for weight\n  const options = [\n    { key: 'integer', text: 'integer', value: 'integer' },\n    { key: 'decimals', text: 'decimals', value: 'decimals' },\n  ]\n\n  return (\n    <div className = \"EntriesContainer\">\n      <Nav/>\n        <Table celled className=\"EntriesTable\">\n          <Table.Header>\n            <Table.Row style={{textAlign: \"center\"}}> \n              <Table.HeaderCell>TimeStamp</Table.HeaderCell>\n              <Table.HeaderCell>Weight</Table.HeaderCell>\n              <Table.HeaderCell>Edit</Table.HeaderCell>\n              <Table.HeaderCell>Delete</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          {entries}\n          <Table.Footer>\n            <Table.Row>\n              <Table.HeaderCell colSpan='4'>\n                  <Menu floated='right' pagination>\n                  <Menu.Item as='a' icon>\n                    <Icon name='chevron left' />\n                  </Menu.Item>\n                  <Menu.Item as='a'>1</Menu.Item>\n                  <Menu.Item as='a'>2</Menu.Item>\n                  <Menu.Item as='a'>3</Menu.Item>\n                  <Menu.Item as='a'>4</Menu.Item>\n                  <Menu.Item as='a' icon>\n                    <Icon name='chevron right' />\n                  </Menu.Item>\n                </Menu>\n              </Table.HeaderCell>\n            </Table.Row>\n          </Table.Footer>\n        </Table>\n\n        {/* Modal To Add New Entry*/}\n        <Modal\n          size={'tiny'}\n          onClose={() => setOpen(false)}\n          onOpen={() => setOpen(true)}\n          open={open}\n          trigger={<Button className=\"showmodal--button\">Add New Entry</Button>}\n        >\n        <Modal.Header>Add New Entry</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n          <Input\n            label={<Dropdown defaultValue='int' options={options} />}\n            labelPosition='right'\n            placeholder='Enter weight'\n            value={weightinput}\n            onChange={e => setWeight(e.target.value)}\n          />\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            content=\"Add\"\n            labelPosition='right'\n            icon='checkmark'\n            onClick={sendEntry}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n\n      {/* Modal To Update Entry */}\n      <Modal\n          size={'tiny'}\n          onClose={() => setOpen2(false)}\n          onOpen={() => setOpen2(true)}\n          open={open2}\n      >\n        <Modal.Header> Edit Entry</Modal.Header>\n        <Modal.Content>\n          <Modal.Description>\n          <Input\n            label={<Dropdown defaultValue='int' options={options} />}\n            labelPosition='right'\n            placeholder='Enter weight'\n            value={newWeight}\n            onChange={e => setnewWeight(e.target.value)}\n          />\n          </Modal.Description>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button\n            content=\"Add\"\n            labelPosition='right'\n            icon='checkmark'\n            onClick={setUpdate}\n            positive\n          />\n        </Modal.Actions>\n      </Modal>\n\n      <Button onClick={()=>history.goBack()} content='Back' icon='left arrow' labelPosition='left' />\n\n    </div>\n  )\n}\n\nexport default EntriesPage\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/HomePage.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleBird.js",["121","122","123"],"import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Nav from \"../components/Navbar/Nav\";\nimport * as d3 from \"d3\";\nimport {\n  SingleBirdPageWrapper,\n  SingleBirdContainer,\n  SingleBirdWrapper,\n  SingleBirdContent,\n  SingleBirdName,\n  SingleBirdSpecies,\n  SingleBirdWeight,\n  SingleBirdSex,\n  ImageWrapper,\n  SingleBirdImage,\n  Backbutton,\n  ViewEntries,\n  DeleteBird,\n  AnalysisContainer,\n  VisualContainer,\n  StatsContainer,\n  StatsWrapper,\n  Statsdetail,\n  ChartContainer,\n  ChartChangeH1Bar,\n  ChartChangeH1Line,\n} from \"./SingleBirdStyle\";\nimport BarChart from \"../components/Charts/BarChart\";\nimport LineChart from \"../components/Charts/LineChart\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { deletebird } from \"../feature/BirdsSlice\";\n\nfunction SingleBird({ match }) {\n  const birds = useSelector((state) => state.birds);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  let i;\n  let currentbird_img,\n    currentbird_name,\n    currentbird_id,\n    currentbird_weights,\n    currentbird_sex,\n    currentbird_species,\n    currentbird_speciesid;\n\n  for (i = 0; i < birds.length; i++) {\n    if (\n      birds[i].name === match.params.name &&\n      birds[i].id == match.params.birdsid\n    ) {\n      currentbird_img = birds[i].img;\n      currentbird_name = birds[i].name;\n      currentbird_id = birds[i].id;\n      currentbird_weights = birds[i].weights;\n      currentbird_sex = birds[i].sex;\n      currentbird_species = birds[i].species;\n      currentbird_speciesid = birds[i].species_id;\n    }\n  }\n\n  // DELETING BIRD (FROM BIRDSDATA AND ENTRIES)\n  const deleteBird = () => {\n    dispatch(\n      deletebird({\n        id: currentbird_id,\n      })\n    );\n    history.push(`/species/${currentbird_species}`);\n  };\n\n  // calculating the weights stats\n  const weights = Object.values(\n    currentbird_weights.map((weights) => weights.weight)\n  );\n\n  const stats = {\n    avg_weight: parseFloat(d3.mean(weights)).toFixed(2),\n    min_weights: d3.min(weights),\n    max_weights: d3.max(weights),\n    median_weights: d3.median(weights),\n    weights_dev: parseFloat(d3.deviation(weights)).toFixed(2),\n  };\n\n  // For the bar and line chart\n  const [LineActive, setLineActive] = useState(false);\n  const bardetails = [];\n  let j;\n  for (j = 0; j < currentbird_weights.length; j++) {\n    bardetails.push({\n      created_at: currentbird_weights[j].created_at,\n      weight: currentbird_weights[j].weight,\n    });\n  }\n\n  return (\n    <SingleBirdPageWrapper>\n      <Nav />\n\n      <DeleteBird onClick={deleteBird}> Delete Bird </DeleteBird>\n\n      <SingleBirdContainer key={currentbird_id}>\n        <SingleBirdWrapper>\n          <ImageWrapper>\n            <SingleBirdImage src={currentbird_img} />\n          </ImageWrapper>\n          <SingleBirdContent>\n            <SingleBirdName>{currentbird_name}</SingleBirdName>\n            <SingleBirdSpecies>\n              Species: {currentbird_species}\n            </SingleBirdSpecies>\n            <SingleBirdSex>Sex: {currentbird_sex}</SingleBirdSex>\n            <SingleBirdWeight>\n              {/* Will be using calculated average weight */}\n              Average Weight: {stats.avg_weight}g\n            </SingleBirdWeight>\n          </SingleBirdContent>\n        </SingleBirdWrapper>\n\n        <AnalysisContainer>\n          <StatsContainer>\n            <StatsWrapper>\n              <Statsdetail>Average Weight: {stats.avg_weight}g</Statsdetail>\n              <Statsdetail>Minimum Weight: {stats.min_weights}g</Statsdetail>\n              <Statsdetail>Maximum Weight: {stats.max_weights}g</Statsdetail>\n              <Statsdetail>Median Weight: {stats.median_weights}g</Statsdetail>\n              <Statsdetail>Weight Deviation: {stats.weights_dev}g</Statsdetail>\n            </StatsWrapper>\n          </StatsContainer>\n\n          <VisualContainer>\n            <ChartContainer>\n              {LineActive ? (\n                <LineChart data={bardetails} />\n              ) : (\n                <BarChart data={bardetails} />\n              )}\n            </ChartContainer>\n\n            {LineActive ? (\n              <ChartChangeH1Bar LineActive onClick={() => setLineActive(false)}>\n                Bar Chart\n              </ChartChangeH1Bar>\n            ) : (\n              <ChartChangeH1Line\n                LineActive\n                onClick={() => setLineActive(true)}\n              >\n                Line Chart\n              </ChartChangeH1Line>\n            )}\n          </VisualContainer>\n        </AnalysisContainer>\n      </SingleBirdContainer>\n\n      <Backbutton onClick={() => history.goBack()}> Back </Backbutton>\n      <ViewEntries\n        to={`/birds/${currentbird_name}/${currentbird_id}/${currentbird_species}/entries`}\n      >\n        View Entries\n      </ViewEntries>\n    </SingleBirdPageWrapper>\n  );\n}\n\nexport default SingleBird;\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/feature/SpeciesSlice.js",["124","125"],"import { createSlice, current } from \"@reduxjs/toolkit\";\n\n//shows all the species\n//Each species will have different birds of different name\nconst initialState = [\n  {\n    id: 1,\n    name: \"American Robin\",\n    description:\n      \"The quintessential early bird, American Robins are common sights on lawns across North America, where you often see them tugging earthworms out of the ground. Robins are popular birds for their warm orange breast, cheery song, and early appearance at the end of winter. Though they’re familiar town and city birds, American Robins are at home in wilder areas, too, including mountain forests and Alaskan wilderness\",\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/303441381-480px.jpg\",\n  },\n  {\n    id: 2,\n    name: \"Northern Cardinal\",\n    description:\n      \"The male Northern Cardinal is perhaps responsible for getting more people to open up a field guide than any other bird. They’re a perfect combination of familiarity, conspicuousness, and style: a shade of red you can’t take your eyes off. Even the brown females sport a sharp crest and warm red accents. Cardinals don’t migrate and they don’t molt into a dull plumage, so they’re still breathtaking in winter’s snowy backyards. In summer, their sweet whistles are one of the first sounds of the morning.\",\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/297087301-480px.jpg\",\n  },\n  {\n    id: 3,\n    name: \"Blue Jay\",\n    description:\n      \"This common, large songbird is familiar to many people, with its perky crest; blue, white, and black plumage; and noisy calls. Blue Jays are known for their intelligence and complex social systems with tight family bonds. Their fondness for acorns is credited with helping spread oak trees after the last glacial period.\",\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/311635911-480px.jpg\",\n  },\n  {\n    id: 4,\n    name: \"American Crow\",\n    description:\n      \"American Crows are familiar over much of the continent: large, intelligent, all-black birds with hoarse, cawing voices. They are common sights in treetops, fields, and roadsides, and in habitats ranging from open woods and empty beaches to town centers. They usually feed on the ground and eat almost anything—typically earthworms, insects and other small animals, seeds, and fruit; also garbage, carrion, and chicks they rob from nests. Their flight style is unique, a patient, methodical flapping that is rarely broken up with glides.\",\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/59858041-480px.jpg\",\n  },\n  {\n    id: 5,\n    name: \"Fish Crow\",\n    description:\n      \"Not everyone realizes it, but there are two kinds of crows across much of the eastern United States. Looking almost identical to the ubiquitous American Crow, Fish Crows are tough to identify until you learn their nasal calls. Look for them around bodies of water, usually in flocks and sometimes with American Crows. They are supreme generalists, eating just about anything they can find. Fish Crows have expanded their range inland and northward along major river systems in recent decades.\",\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/302400101-480px.jpg\",\n  },\n];\n\nconst SpeciesSlice = createSlice({\n  name: \"species\",\n  initialState,\n  reducers: {\n    addSpecies: (state, action) => {\n      const newSpecies = {\n        id: Math.random(),\n        name: action.payload.name,\n        description: action.payload.desc,\n        img: action.payload.img,\n        date: new Date(Date.now()).toLocaleString().split(\",\")[0],\n      };\n      state.push(newSpecies);\n    },\n\n    deleteSpecies: (state = initialState, action) => {\n      return state.filter((birds) => birds.name != action.payload.name);\n    },\n\n    updateSpecies: (state = initialState, action) => {\n      state.map((birds) => console.log(birds));\n\n      return {\n        ...state,\n        species: state.map((birds) =>\n          birds.id === action.payload.id\n            ? { ...birds, description: birds.description, img: birds.img }\n            : birds\n        ),\n      };\n    },\n  },\n});\n\nexport const { addSpecies, deleteSpecies, updateSpecies } =\n  SpeciesSlice.actions;\n\n//export posts reducer function so that it can be imported into store.js\nexport default SpeciesSlice.reducer;\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/feature/BirdsSlice.js",["126"],"import { createSlice, current } from \"@reduxjs/toolkit\";\n\n//Show individual birds\nconst initialState = [\n  {\n    id: 1,\n    species_id: 1,\n    name: \"Tom\",\n    sex: \"M\",\n    species: \"American Robin\",\n    weights: [\n      {\n        weight: \"20\",\n        created_at: \"1/1/2000\",\n      },\n      {\n        weight: \"50\",\n        created_at: \"1/2/2000\",\n      },\n      {\n        weight: \"80\",\n        created_at: \"1/3/2000\",\n      },\n    ],\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/59858031-480px.jpg\",\n  },\n  {\n    id: 2,\n    species_id: 1,\n    name: \"Mary\",\n    sex: \"M\",\n    species: \"American Robin\",\n    weights: [\n      {\n        weight: \"20\",\n        created_at: \"1/1/2000\",\n      },\n    ],\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/303441871-240px.jpg\",\n  },\n  {\n    id: 3,\n    species_id: 1,\n    name: \"John\",\n    sex: \"M\",\n    species: \"American Robin\",\n    weights: [\n      {\n        weight: \"20\",\n        created_at: \"1/1/2000\",\n      },\n    ],\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/60412921-1280px.jpg\",\n  },\n  {\n    id: 4,\n    species_id: 1,\n    name: \"Harry\",\n    sex: \"M\",\n    species: \"American Robin\",\n    weights: [\n      {\n        weight: \"25\",\n        created_at: \"1/1/2000\",\n      },\n    ],\n    img: \"https://www.allaboutbirds.org/guide/assets/photo/60412941-240px.jpg\",\n  },\n];\n\nconst birdsSlice = createSlice({\n  name: \"birds\",\n  initialState,\n  reducers: {\n    addBird: (state = initialState, action) => {\n      const newBird = {\n        id: action.payload.id,\n        species_id: action.payload.speciesId,\n        name: action.payload.name,\n        sex: action.payload.sex,\n        species: action.payload.species,\n        weights: [\n          {\n            weight: action.payload.weight,\n            created_at: new Date(Date.now()).toLocaleString().split(\",\")[0],\n          },\n        ],\n        img: action.payload.img,\n      };\n      state.push(newBird);\n      console.log(current(state));\n    },\n\n    deletebird: (state = initialState, action) => {\n      let i;\n      for (i = 0; i < state.length; i++) {\n        if (state[i].id == action.payload.id) {\n          state.splice(i, 1);\n          i--;\n        } else {\n          continue;\n        }\n      }\n      return state;\n    },\n  },\n});\n\nexport const { addBird, deletebird } = birdsSlice.actions;\n\n//export posts reducer function so that it can be imported into store.js\nexport default birdsSlice.reducer;\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleSpeciesPageStyle.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/HomePageStyle.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/pages/SingleBirdStyle.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Members/Members.js",["127","128"],"import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Container, Image } from \"semantic-ui-react\";\nimport \"./MembersStyle.css\";\n\nfunction Members(params) {\n  const birds = useSelector((state) => state.birds);\n\n  //MUST INCLUDE RETURN IF NOT NTH WILL BE SHOWN\n  const data = birds.map((bird) => {\n    if (bird.species_id == params.id) {\n      return (\n        <Card\n          className=\"Card--birdStyle\"\n          key={bird.id}\n          as={Link}\n          to={`/birds/${bird.name}/${bird.id}`}\n        >\n          <div className=\"img--wrapper\">\n            <Image className=\"bird__img\" src={bird.img} />\n          </div>\n          <Card.Content>\n            <Card.Header style={{ color: \"white\" }}>{bird.name}</Card.Header>\n          </Card.Content>\n        </Card>\n      );\n    }\n  });\n\n  return (\n    <div className=\"members__wrapper\">\n      <h2 className=\"container__title\">Members</h2>\n      <Container className=\"birdStyleContainer\">{data}</Container>\n    </div>\n  );\n}\n\nexport default Members;\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Charts/LineChart.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/Hero.js",["129"],"import React, { useState } from \"react\";\nimport { HeroWrapper, BackgroundOverlay, HeroContainer } from \"./HeroStyles\";\nimport SearchBar from \"./SearchBar/SearchBar\";\nimport SpeciesSearch from \"./SpeciesSearch/SpeciesSearch\";\nimport SpeciesContainer from \"./SpeciesContainer/SpeciesContainer\";\nimport { useSelector } from \"react-redux\";\n\nfunction Hero() {\n\n  const species = useSelector((state) => state.species)\n  \n  // Getting value from input search bar\n  const [value, setValue] = useState(\"\");\n  const handleChange = (e) => {\n    setValue(e);\n  };\n\n  //filtering the state to display search result\n  const results = species.filter((data) => {\n    if (value === \"\" && value.length > 3) {\n      return data;\n    } else {\n      if (data.name.toLowerCase().includes(value.toLowerCase())) {\n        return data;\n      }\n    }\n  });\n\n  return (\n    <HeroContainer>\n      <HeroWrapper>\n        <BackgroundOverlay>\n          <SearchBar\n            value={value}\n            handleChange={(e) => handleChange(e.target.value)}\n          />\n          {!value ? <SpeciesContainer /> : <SpeciesSearch results={results} />}\n        </BackgroundOverlay>\n      </HeroWrapper>\n    </HeroContainer>\n  );\n}\n\nexport default Hero;\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Charts/BarChart.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Navbar/Nav.js",["130","131","132"],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/HeroStyles.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Navbar/NavStyles.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SearchBar/SearchBar.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SpeciesSearch/SpeciesSearch.js",[],"/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SpeciesContainer/SpeciesContainer.js",["133","134"],"import React, { useEffect, useState } from \"react\";\nimport { Card, Container, Image } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport \"./SpeciesContainerStyle.css\";\nimport { useSelector } from \"react-redux\";\n\nfunction SpeciesContainer() {\n  // pulling state from redux\n  const species = useSelector((state) => state.species);\n  \n  const data = species.map((family) => {\n    return (\n      <Card\n        className=\"CardStyle\"\n        key={family.id}\n        as={Link}\n        to={`/species/${family.name}`}\n      >\n        <div className=\"image--wrapper\">\n          <Image className=\"CardStyle__img\" src={family.img} />\n        </div>\n        <Card.Content className=\"CardStyle--content\">\n          <Card.Header>{family.name}</Card.Header>\n        </Card.Content>\n      </Card>\n    );\n  });\n\n  return (\n    <div className=\"TotalContainer\">\n      <Container className=\"card--container\">{data}</Container>\n    </div>\n  );\n}\n\nexport default SpeciesContainer;\n","/Users/dtzr/Documents/GitHub/birdex-redux/src/components/Hero/SearchBar/SearchBarStyles.js",[],{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":48,"column":25,"nodeType":"141","messageId":"142","endLine":48,"endColumn":27},{"ruleId":"139","severity":1,"message":"140","line":75,"column":21,"nodeType":"141","messageId":"142","endLine":75,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":77,"column":20,"nodeType":"141","messageId":"142","endLine":77,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":116,"column":26,"nodeType":"141","messageId":"142","endLine":116,"endColumn":28},{"ruleId":"139","severity":1,"message":"140","line":124,"column":21,"nodeType":"141","messageId":"142","endLine":124,"endColumn":23},{"ruleId":"139","severity":1,"message":"140","line":125,"column":23,"nodeType":"141","messageId":"142","endLine":125,"endColumn":25},{"ruleId":"139","severity":1,"message":"140","line":126,"column":24,"nodeType":"141","messageId":"142","endLine":126,"endColumn":26},{"ruleId":"139","severity":1,"message":"140","line":127,"column":21,"nodeType":"141","messageId":"142","endLine":127,"endColumn":23},{"ruleId":"139","severity":1,"message":"143","line":128,"column":36,"nodeType":"141","messageId":"142","endLine":128,"endColumn":38},{"ruleId":"144","severity":1,"message":"145","line":158,"column":5,"nodeType":"146","messageId":"147","endLine":164,"endColumn":6},{"ruleId":"148","severity":1,"message":"149","line":55,"column":5,"nodeType":"150","endLine":55,"endColumn":7,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":63,"column":13,"nodeType":"154","messageId":"155","endLine":63,"endColumn":23},{"ruleId":"152","severity":1,"message":"156","line":94,"column":13,"nodeType":"154","messageId":"155","endLine":94,"endColumn":21},{"ruleId":"152","severity":1,"message":"157","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"139","severity":1,"message":"140","line":50,"column":19,"nodeType":"141","messageId":"142","endLine":50,"endColumn":21},{"ruleId":"152","severity":1,"message":"158","line":58,"column":7,"nodeType":"154","messageId":"155","endLine":58,"endColumn":28},{"ruleId":"152","severity":1,"message":"159","line":1,"column":23,"nodeType":"154","messageId":"155","endLine":1,"endColumn":30},{"ruleId":"139","severity":1,"message":"143","line":59,"column":49,"nodeType":"141","messageId":"142","endLine":59,"endColumn":51},{"ruleId":"139","severity":1,"message":"140","line":97,"column":25,"nodeType":"141","messageId":"142","endLine":97,"endColumn":27},{"ruleId":"160","severity":1,"message":"161","line":11,"column":33,"nodeType":"162","messageId":"163","endLine":11,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":12,"column":25,"nodeType":"141","messageId":"142","endLine":12,"endColumn":27},{"ruleId":"160","severity":1,"message":"164","line":19,"column":41,"nodeType":"162","messageId":"163","endLine":19,"endColumn":43},{"ruleId":"139","severity":1,"message":"140","line":23,"column":27,"nodeType":"141","messageId":"142","endLine":23,"endColumn":29},{"ruleId":"144","severity":1,"message":"145","line":45,"column":5,"nodeType":"146","messageId":"147","endLine":47,"endColumn":6},{"ruleId":"139","severity":1,"message":"140","line":55,"column":14,"nodeType":"141","messageId":"142","endLine":55,"endColumn":16},{"ruleId":"152","severity":1,"message":"157","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"165","line":1,"column":28,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getbirdEntries'. Either include it or remove the dependency array.","ArrayExpression",["168"],"no-unused-vars","'deletebird' is assigned a value but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'useEffect' is defined but never used.","'currentbird_speciesid' is assigned a value but never used.","'current' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.filter() expects a value to be returned at the end of arrow function.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},"Update the dependencies array to be: [getbirdEntries]",{"range":"171","text":"172"},[1459,1461],"[getbirdEntries]"]